import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.graph_objects as go
import plotly.express as px


df=pd.read_csv("data/data_fi_region.csv")
prod_conso_jours=pd.read_csv('data/prod_conso_jours.csv')
data_meteo_prod_conso=pd.read_csv('data/data_fi.csv')
energie_clean_year=pd.read_csv('data/energie_clean_year.csv', )
prod_conso_jours['date'] = pd.to_datetime(prod_conso_jours['date'], errors='coerce')

# Configuration de la page Streamlit
st.set_page_config(page_title="Analyse de la consommation d'√©lectricit√©", layout="wide")



# Menu de navigation
st.sidebar.title("Sommaire")

# Navigation
pages = ["Contexte du projet", "Exploration des donn√©es", "Analyse de donn√©es", "Mod√©lisation","Pr√©diction"]
page = st.sidebar.radio("Aller vers la page :", pages)

# Ajouter de l'espace avec des lignes vides
st.sidebar.write("")
st.sidebar.write("")

# Ajouter un trait de s√©paration
st.sidebar.markdown("---")

# Ajouter encore un peu d'espace
st.sidebar.write("")

# Image et cr√©dit
st.sidebar.image('data/image1.jpg', caption="Analyse √©nerg√©tique bas√©e sur les donn√©es de l'ODRE")
st.sidebar.write('Auteur : Badr El Hilali')

if page == pages[0]:
    # Contexte du projet
  st.title('Consommation en √©lectricit√© de 2013-2022 en France')
  st.subheader('Pr√©sentation du sujet')

  st.write("""
        L‚Äôenjeu de la s√©curit√© de l‚Äôapprovisionnement en √©nergie est une question capitale. En effet, l‚Äô√©lectricit√© a cette particularit√© de ne pas pouvoir √™tre stock√©e en grande quantit√©.
        L'√©nergie √©lectrique est aussi devenue un √©l√©ment essentiel de la vie quotidienne et de l'activit√© √©conomique moderne. Elle est utilis√©e pour alimenter les foyers, les industries et les transports.
        Pour r√©pondre √† la demande croissante d'√©lectricit√©, les fournisseurs d'√©nergie ont besoin de pr√©voir avec pr√©cision la consommation √©lectrique future. La pr√©vision de la consommation d'√©lectricit√© est un enjeu cl√© pour garantir la fiabilit√© du syst√®me √©lectrique, optimiser la production et minimiser les co√ªts.
        
        La pr√©vision de la consommation d'√©lectricit√© repose sur l'analyse de donn√©es historiques, qui permettent de d√©tecter des tendances et des cycles saisonniers dans la consommation √©lectrique. Les variables cl√©s pour la pr√©vision de la consommation d'√©lectricit√© sont la date et l'heure, qui permettent de tenir compte des fluctuations de la demande au cours du temps, ainsi que les donn√©es de production d'√©nergie, comme la production thermique, nucl√©aire et √©olienne.
        
        Il est important de retenir que la quantit√© d‚Äô√©lectricit√© produite et inject√©e dans le r√©seau doit toujours √™tre en √©quilibre. √Ä tout moment, nous devons avoir une consommation √©gale √† la production. Tout d√©s√©quilibre provoquerait un blackout total.
        
    """)

    # Objectifs du projet
  expander = st.expander("Objectifs")
  expander.markdown("""
        * Comprendre la relation entre la consommation et la production des diff√©rentes sources d'√©nergie √©lectrique
        * Focus sur les √©nergies renouvelables
        * Produire un mod√®le permettant de calculer les estimations des consommations 
    """)

    # Affichage d'une image dans l'application Streamlit
elif page == pages[1]:
  st.title('Exploration des donn√©es ')
  st.sidebar.markdown("---")
    
  st.subheader("Identification des sources de donn√©es")
  st.write("""
        Le jeu de donn√©es dont nous disposons concerne la consommation d'√©nergie √©lectrique en France ainsi que la production des diff√©rentes 
        sources d'√©nergie √©lectrique, telles que l'√©nergie nucl√©aire, thermique et √©olienne. Ces donn√©es sont collect√©es √† une r√©solution horaire 
        sur une p√©riode de plusieurs ann√©es. Les donn√©es principales proviennent du portail d‚ÄôOpen Data R√©seaux √ânergies.

        Les donn√©es de consommation pr√©sentent les donn√©es r√©gionales depuis l'ann√©e 2013.  
        Nous y trouverons les donn√©es de consommation et la production selon les diff√©rentes fili√®res composant le mix √©nerg√©tique avec des mesures 
        prises toutes les demi-heures.
""")

# Ajout de donn√©es compl√©mentaires
  st.subheader("Ajout de donn√©es compl√©mentaires")
  st.markdown("""
    Afin d'enrichir l'analyse de la consommation √©nerg√©tique, des donn√©es m√©t√©orologiques ont √©t√© ajout√©es, telles que :
    * Temp√©rature
    * Vitesse du vent
    * Et plusieurs autres variables m√©t√©orologiques
""")
 
  # Exploration des donn√©es
  st.subheader("Pr√©sentation finale des donn√©es")
    
  st.dataframe(df.head())
  st.write("Dimensions du dataframe :")
    
  st.write(df.shape)
    
  if st.checkbox("Afficher les valeurs manquantes") : 
    st.dataframe(df.isna().sum())
        
  if st.checkbox("Afficher les doublons") : 
    st.write(df.duplicated().sum())

elif page == pages[2]:
  st.title('Analyse de donn√©es')
  st.sidebar.markdown("---")

  


  # Titre de la section
  st.header("La matrice de corr√©lation des variables")

  # S√©lection des colonnes num√©riques
  colonnes_numeriquess = [
   'production_totale',
   'Temp√©rature (¬∞C)',
   'Humidit√©', 
   'Vitesse du vent moyen 10 mn',
   'Direction du vent moyen 10 mn',
   'Pression station',
   'Consommation (MW)',
   'Thermique (MW)',
   'Nucl√©aire (MW)',
   'Eolien (MW)', 
   'Solaire (MW)',
   'Hydraulique (MW)',
   'Pompage (MW)',
   'Bio√©nergies (MW)',
   'Ech. physiques (MW)'
]

  # Calcul de la matrice de corr√©lation
  correlation_matrix = data_meteo_prod_conso[colonnes_numeriquess].corr()

  # Cr√©ation de la figure
  fig, ax = plt.subplots(figsize=(15, 6))

# Cr√©ation de la heatmap
  sns.heatmap(correlation_matrix,
           annot=True,  # Afficher les valeurs
           cmap='coolwarm',  # Palette de couleurs 
           center=0,  # Centre la palette sur 0
           fmt='.2f',  # Format des nombres (2 d√©cimales)
           linewidths=0.5,  # Largeur des lignes
           ax=ax
           )

  # Personnalisation
  plt.title('Matrice de Corr√©lation - Variables M√©t√©orologiques et Production d\'√ânergie (National)')
  plt.xticks(rotation=45, ha='right')
  plt.yticks(rotation=0)
  plt.tight_layout()

  # Affichage dans Streamlit
  st.pyplot(fig)

 
  # Titre de la section
  st.header("Comparaison Production vs Consommation")

# Cr√©ation de la figure
  fig, ax = plt.subplots(figsize=(15, 6))

# Cr√©ation du graphique de comparaison
  sns.lineplot(data=prod_conso_jours, x='date', y='production_totale', 
            label='Production Totale', ax=ax)
  sns.lineplot(data=prod_conso_jours, x='date', y='Consommation (MW)', 
            label='Consommation', ax=ax)

# Personnalisation
  plt.title('Comparaison Production Totale vs Consommation')
  plt.xticks(rotation=45) 
  plt.legend()
  plt.tight_layout()

# Affichage dans Streamlit
  st.pyplot(fig)

# Optionnel : Ajouter une description sous le graphique
  st.write("""
  On peut observer des p√©riodes o√π la production d√©passe la consommation (surplus) et d'autres o√π la consommation d√©passe la production (d√©ficit).
Cette comparaison est essentielle pour comprendre l'√©quilibre √©nerg√©tique du pays. Les p√©riodes de d√©ficit peuvent n√©cessiter des importations d'√©lectricit√© ou des mesures de r√©duction de la demande, tandis que les p√©riodes de surplus peuvent √™tre l'occasion d'exporter de l'√©lectricit√© ou de stocker des r√©serves.
  """)


  annees = np.arange(2013, 2023, 1)

# Interface Streamlit
  st.title("üìä Visualisation de la Production & Consommation d'√ânergie")

# S√©lection de l'ann√©e avec un slider
  annee_selectionnee = st.slider("S√©lectionnez une ann√©e :", int(annees.min()), int(annees.max()), int(annees.min()))

# ‚úÖ V√©rifier que la colonne "date" est bien en datetime
  if prod_conso_jours['date'].dtype == 'datetime64[ns]':
    mask = prod_conso_jours['date'].dt.year == annee_selectionnee
    data_annee = prod_conso_jours[mask]

    # V√©rifier si des donn√©es existent pour l'ann√©e s√©lectionn√©e
    if not data_annee.empty:
        fig, ax = plt.subplots(figsize=(15, 6))
        ax.plot(data_annee['date'], data_annee['production_totale'], label='Production', color='blue')
        ax.plot(data_annee['date'], data_annee['Consommation (MW)'], label='Consommation', color='orange')

        ax.set_title(f'Production & Consommation en {annee_selectionnee}')
        ax.tick_params(axis='x', rotation=45)
        ax.legend()
        ax.grid(True)

        st.pyplot(fig)
        st.write("""Gr√¢ce √† ce graphique nous confirmons un effet de saisonnalit√© chaque ann√©e !. Cela nous permet √©galement de remarquer qu'il existe un effet de saisonnalit√©  par mois. On conclus que la production et la consommation semble se suivre de mani√®re cyclique.""")
    else:
        st.warning(f"Aucune donn√©e disponible pour l'ann√©e {annee_selectionnee}.")
  else:
    st.error("Erreur : La colonne 'date' n'est pas au format datetime.")







  dfgeo = df.groupby('R√©gion', as_index=False).agg({
    'production_totale': 'mean',
    'Thermique (MW)': 'mean',
    'Nucl√©aire (MW)': 'mean', 
    'Eolien (MW)': 'mean',
    'Solaire (MW)': 'mean',
    'Hydraulique (MW)': 'mean'
})

# Interface Streamlit
  st.title("üåç Comparaison de la Production √ânerg√©tique par R√©gion")

# Cr√©ation du graphique Plotly
  fig = go.Figure()

# Ajout de la production totale
  fig.add_trace(go.Bar(
    name='Production Totale',
    x=dfgeo['R√©gion'],
    y=dfgeo['production_totale'],
    marker_color='rgba(70, 130, 180, 0.7)',
    width=0.5
))

# Ajout des diff√©rents types d'√©nergie
  types_energie = ['Thermique (MW)', 'Nucl√©aire (MW)', 'Eolien (MW)', 
                'Solaire (MW)', 'Hydraulique (MW)']
  colors = ['rgb(255,127,14)', 'rgb(44,160,44)', 'rgb(214,39,40)', 
          'rgb(148,103,189)', 'rgb(140,86,75)']

  for type_energie, color in zip(types_energie, colors):
    fig.add_trace(go.Bar(
      name=type_energie.replace(' (MW)', ''),
      x=dfgeo['R√©gion'],
      y=dfgeo[type_energie],
      marker_color=color,
      opacity=0.7
    ))

# Mise en page
  fig.update_layout(
    xaxis_tickangle=45,
    barmode='group',
    height=600,
    width=1200,
    template='plotly_white',
    showlegend=True,
    legend=dict(
       yanchor="top",
       y=0.99,
      xanchor="right",
      x=0.99
    ),
    yaxis_title="Production (MW)"
)

# Affichage du graphique dans Streamlit
  st.plotly_chart(fig, use_container_width=True)
  
  st.write("- **Production d'√©nergie variable :** Les r√©gions fran√ßaises pr√©sentent des niveaux de production d'√©nergie tr√®s diff√©rents. Certaines r√©gions, comme Auvergne-Rh√¥ne-Alpes, affichent une production √©lev√©e, tandis que d'autres, comme l'√éle-de-France, ont une production tr√®s faible.")
  st.write("- **Mix √©nerg√©tique diversifi√© :** Chaque r√©gion a une combinaison unique de sources d'√©nergie. On observe une pr√©dominance du nucl√©aire et une contribution notable des √©nergies renouvelables (√©olien, solaire) dans plusieurs r√©gions.")
  st.write("- **D√©pendance √©nerg√©tique :** Les r√©gions avec une faible production, comme l'√éle-de-France, d√©pendent fortement des autres r√©gions pour leur approvisionnement √©nerg√©tique.")

  st.subheader("La production en MW d'√©lectricit√©")
  option=st.radio(
        "Set selectbox label visibility üëâ",
        key="visibility",
        options=['Thermique (MW)', 
          'Nucl√©aire (MW)', 
          'Eolien (MW)',
            'Solaire (MW)', 
            'Hydraulique (MW)', 
            'Pompage (MW)',
            'Bio√©nergies (MW)'],
    )
 #bloquer les axes 
  def lineplot():

    if option =='Thermique (MW)':
        st.bar_chart(data=energie_clean_year[['Thermique (MW)','annee']],x='annee')
        st.write("Production thermique : La production d'√©lectricit√© √† partir de sources thermiques semble avoir √©t√© la principale source d'√©nergie au d√©but de la p√©riode √©tudi√©e, mais on peut observer une diminution progressive de cette production au fil des ann√©es.")
    elif option=='Nucl√©aire (MW)':
        st.bar_chart(data=energie_clean_year[['Nucl√©aire (MW)','annee']],x='annee')
        st.write("Production nucl√©aire : La production d'√©lectricit√© √† partir de sources nucl√©aires a maintenu une certaine stabilit√© au cours des ann√©es, avec des variations mineures")
    elif option=='Eolien (MW)':
        st.bar_chart(data=energie_clean_year[['Eolien (MW)','annee']],x='annee')
    elif option=='Solaire (MW)':
        st.bar_chart(data=energie_clean_year[['Solaire (MW)','annee']],x='annee')
        st.write("√ânergie √©olienne et solaire : Les sources d'√©nergie √©olienne et solaire ont connu une augmentation significative de leur production d'√©lectricit√© au fil du temps, refl√©tant une adoption croissante des √©nergies renouvelables")
    elif option=='Hydraulique (MW)':
        st.bar_chart(data=energie_clean_year[['Hydraulique (MW)','annee']],x='annee')
    elif option=='Pompage (MW)':
        st.bar_chart(data=energie_clean_year[['Pompage (MW)','annee']],x='annee')
        st.write("Production hydraulique et pompage : La production d'√©lectricit√© √† partir de sources hydrauliques et de pompage a montr√© des variations en fonction des conditions climatiques et des besoins en √©lectricit√©.")
    elif option=='Bio√©nergies (MW)':
        st.bar_chart(data=energie_clean_year[['Bio√©nergies (MW)','annee']],x='annee')
        st.write("Bio√©nergies : La production d'√©lectricit√© √† partir de sources de bio√©nergies a √©galement connu une augmentation constante, soulignant l'int√©r√™t croissant pour les sources d'√©nergie renouvelables.")
  lineplot()


  st.title("üìä √âvolution de la consommation d'√©lectricit√© par r√©gion")

# Assurez-vous que la colonne date est au format datetime
  df_grouped = df.groupby(['date', 'R√©gion'])['Consommation (MW)'].sum().reset_index()
  if not pd.api.types.is_datetime64_any_dtype(df_grouped['date']):
      df_grouped['date'] = pd.to_datetime(df_grouped['date'])

  fig, ax = plt.subplots(figsize=(15, 8))
      
  # Get unique regions
  regions = df_grouped['R√©gion'].unique()
      
  # Plot each region
  for region in regions:
      df_region = df_grouped[df_grouped['R√©gion'] == region]
      ax.plot(df_region['date'], df_region['Consommation (MW)'], label=region)

  # Customize the plot
  ax.set_title("üìà √âvolution de la consommation d'√©lectricit√© par r√©gion")
  ax.set_xlabel("Date")
  ax.set_ylabel("Consommation (MW)")
  ax.legend(title="R√©gion", bbox_to_anchor=(1.05, 1), loc='upper left')
  ax.grid(True)

  # Simplifier la gestion des dates - utiliser le formateur le plus simple
  import matplotlib.dates as mdates
  ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))

  # R√©duire le nombre de ticks √† environ 10 (une par ann√©e pour la p√©riode 2013-2022)
  ax.xaxis.set_major_locator(plt.MaxNLocator(10))

  # D√©sactiver la rotation pour meilleure lisibilit√©
  plt.xticks(rotation=0)

  plt.tight_layout()
  st.pyplot(fig)








  consommation_par_region = df.groupby('R√©gion')['Consommation (MW)'].mean()

# Labels des r√©gions
  regions = ['Auvergne-Rh√¥ne-Alpes', 'Bourgogne-Franche-Comt√©', 'Bretagne', 
           'Centre-Val de Loire', 'Grand Est', 'Hauts-de-France', 'Normandie',
           'Nouvelle-Aquitaine', 'Occitanie', 'Pays de la Loire',
           'Provence-Alpes-C√¥te d Azur', '√éle-de-France']

# Couleurs personnalis√©es
  colors = ["#95B2F8", "#28666e", "#7c9885", "#b5b682", "#8b3d63", "#a682ff",
          "#5887ff", "#55c1ff", "#f3c178", "#fe5e41", 'pink', '#366fa2']

# Cr√©ation de la figure Matplotlib
  fig, ax = plt.subplots(figsize=(6, 6))  # Augmenter la taille de la figure pour plus d'espace
  wedges, texts, autotexts = ax.pie(
    x=consommation_par_region, 
    labels=regions,
    colors=colors,
    autopct=lambda x: str(round(x, 2)) + '%',
    pctdistance=0.75,  # Ajuster la distance des pourcentages
    labeldistance=1.05,  # Ajuster la distance des √©tiquettes
    shadow=True,
)



#

  fig.patch.set_facecolor('white')  # D√©finir le fond en blanc

# Interface Streamlit
  st.title("üìä Consommation d'√ânergie par R√©gion")
  st.pyplot(fig)






  # Titre principal
  st.title("Analyse de la consommation √©lectrique")
  st.write("Ce graphique explore la relation entre la consommation et deux facteurs environnementaux : la temp√©rature et l'humidit√©.")
  df['date'] = pd.to_datetime(df['date'], errors='coerce')
# Cr√©ation de la colonne mois (√† adapter selon votre dataframe)
  df['mois'] = df['date'].dt.month

# Cr√©ation de deux colonnes pour afficher les graphiques c√¥te √† c√¥te
  col1, col2 = st.columns(2)

  with col1:
    fig1 = px.scatter(
      df, x='Temp√©rature (¬∞C)', y='Consommation (MW)', color='mois',
      title="üå°Ô∏è Consommation en fonction de la temp√©rature",
      labels={'Temp√©rature (¬∞C)': 'Temp√©rature (¬∞C)', 'Consommation (MW)': 'Consommation (MW)', 'mois': 'Mois'},
      color_continuous_scale="turbo"  # üé® Changer la palette de couleurs
    )
    fig1.update_layout(width=600, height=500, showlegend=True)
    st.plotly_chart(fig1)

  with col2:
    fig2 = px.scatter(
        df, x='Humidit√©', y='Consommation (MW)', color='mois',
        title="üíß Consommation en fonction de l'humidit√©",
        labels={'Humidit√©': 'Humidit√© (%)', 'Consommation (MW)': 'Consommation (MW)', 'mois': 'Mois'},
        color_continuous_scale="plasma"  # üé® Palette diff√©rente pour un meilleur contraste
    )
    fig2.update_layout(width=600, height=500, showlegend=True)
    st.plotly_chart(fig2)
  st.write("La temp√©rature semble avoir une influence plus marqu√©e sur la consommation que l'humidit√©. Les variations saisonni√®res (chauffage en hiver, climatisation en √©t√©) jouent un r√¥le important dans la relation entre ces facteurs et la consommation.")





    
   
elif page == pages[3]: 
  from sklearn.ensemble import RandomForestRegressor
  from sklearn.model_selection import train_test_split,cross_val_score, learning_curve
  from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
  import xgboost as xgb 
  import scipy.stats as stats

  from sklearn.linear_model import LinearRegression

  import joblib
  df=pd.read_csv("data/data_fi_region.csv")

# --- üìå Charger les donn√©es ---
  df.drop('Unnamed: 0', axis=1, inplace=True)
  
  df['date'] = pd.to_datetime(df['date'])
  df['jour_semaine'] = df['date'].dt.dayofweek
  df['mois'] = df['date'].dt.month
  df.set_index('date',inplace=True)
  df = df[['Temp√©rature (¬∞C)', 'Humidit√©', 'Vitesse du vent moyen 10 mn', 'Pression station', 'R√©gion', 'Consommation (MW)','jour_semaine', 'mois']]
  regions = {
    '√éle-de-France': 75,
    'Auvergne-Rh√¥ne-Alpes': 69,
    'Bourgogne-Franche-Comt√©': 21,
    'Bretagne': 29,
    'Centre-Val de Loire': 37,
    'Grand Est': 67,
    'Hauts-de-France': 59,
    'Normandie': 76,
    'Nouvelle-Aquitaine': 33,
    'Occitanie': 31,
    'Pays de la Loire': 44,
    "Provence-Alpes-C√¥te d'Azur": 13
}
  df['R√©gion'] = df['R√©gion'].map(regions)
  X = df.drop(columns=['Consommation (MW)'])
  y= df['Consommation (MW)']
  X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
  rf_model = joblib.load("rfo_model")
  xgb_model = joblib.load("xgbo_model")
  lr_model = joblib.load("lr_model")

  y_pred_rf = rf_model.predict(X_test)
  y_pred_xgb = xgb_model.predict(X_test)
  y_pred_lr = lr_model.predict(X_test)
  metrics = {
    "Mod√®le": ["RandomForestRegressor", "XGBoostRegressor","LinearRegression"],
    "R¬≤ Score Test": [r2_score(y_test, y_pred_rf), r2_score(y_test, y_pred_xgb),r2_score(y_test,y_pred_lr)],
    "RMSE": [np.sqrt(mean_squared_error(y_test, y_pred_rf)), np.sqrt(mean_squared_error(y_test, y_pred_xgb)),np.sqrt(mean_squared_error(y_test, y_pred_lr))],
    "MAE": [mean_absolute_error(y_test, y_pred_rf), mean_absolute_error(y_test, y_pred_xgb),mean_absolute_error(y_test, y_pred_lr)],
    "R¬≤ Score Train": [rf_model.score(X_train, y_train), xgb_model.score(X_train, y_train),lr_model.score(X_train, y_train)]
}

  df_metrics = pd.DataFrame(metrics)
  st.title("üìä Comparaison des Mod√®les de Pr√©diction")

  st.write("### üîç Objectif : Pr√©dire la consommation d'√©lectricit√© par r√©gion")
  st.write("Nous comparons **Random Forest** et **XGBoost** pour voir lequel est le plus performant.")

  # Affichage du tableau
  st.write("### üìã Tableau comparatif des mod√®les")
  st.table(df_metrics)

  st.write("""
üèÜ **Analyse des r√©sultats :**  
Les mod√©les Random Forest , XGboost et ont les meilleures performances. Mais le score trop √©lev√© de Random Forest ressemble √† du suraprentissage. Nous s√©llectionons donc le  **'XGboost'** pour son score un peu plus faible que  Random Forest. 
""")

 

  feature_importance_xgb = pd.DataFrame({
    'Feature': X.columns,
    'Importance': xgb_model.feature_importances_
}).sort_values(by='Importance', ascending=True)

# Convertir en pourcentage
  feature_importance_xgb['Importance (%)'] = feature_importance_xgb['Importance'] * 100

  # --- üìä Graphique interactif avec Plotly ---
  st.title("üìä Importance des Caract√©ristiques ")

  fig = px.bar(
      feature_importance_xgb, 
      x="Importance (%)", 
      y="Feature", 
      orientation="h", 
      title="üî¥ Feature Importance",
      color="Importance (%)",
      color_continuous_scale="blues",
      hover_data={"Importance (%)": ":.2f"}  # Afficher uniquement au survol
  )

  # Supprimer les labels de texte sur les barres
  fig.update_traces(textposition="none")  

  fig.update_layout(
      xaxis_title="Importance (%)", 
      yaxis_title="Caract√©ristiques", 
      hovermode="x unified"  # Pour un affichage clair au survol
  )

  # --- üìå Affichage Streamlit ---
  st.plotly_chart(fig)


  cv_scores = cross_val_score(xgb_model, X, y, cv=5, scoring='r2')


  # --- üìå Calcul de la courbe d'apprentissage ---
  train_sizes, train_scores, val_scores = learning_curve(
      estimator=xgb_model,
      X=X,
      y=y,
      train_sizes=np.linspace(0.1, 1.0, 10),  # Taille des ensembles d'entra√Ænement
      cv=5,  # Validation crois√©e avec 5 folds
      scoring='r2',  # M√©trique utilis√©e (R¬≤)
      n_jobs=-1  # Utilisation de tous les c≈ìurs disponibles
  )

  # Calcul des moyennes et √©carts-types
  train_scores_mean = train_scores.mean(axis=1)
  train_scores_std = train_scores.std(axis=1)
  val_scores_mean = val_scores.mean(axis=1)
  val_scores_std = val_scores.std(axis=1)

  # --- üìä Graphique interactif avec Plotly ---
  fig = go.Figure()

  # Ajout des courbes
  fig.add_trace(go.Scatter(
      x=train_sizes, y=train_scores_mean, mode='lines+markers', name="Score d'entra√Ænement",
      line=dict(color='blue')
  ))
  fig.add_trace(go.Scatter(
      x=train_sizes, y=val_scores_mean, mode='lines+markers', name="Score de validation",
      line=dict(color='orange')
  ))

  # Ajout des bandes d'erreur
  fig.add_trace(go.Scatter(
      x=train_sizes, y=train_scores_mean + train_scores_std, mode='lines', fill=None, line=dict(color='blue', dash='dot'), showlegend=False
  ))
  fig.add_trace(go.Scatter(
      x=train_sizes, y=train_scores_mean - train_scores_std, mode='lines', fill='tonexty', line=dict(color='blue', dash='dot'), showlegend=False
  ))

  fig.add_trace(go.Scatter(
      x=train_sizes, y=val_scores_mean + val_scores_std, mode='lines', fill=None, line=dict(color='orange', dash='dot'), showlegend=False
  ))
  fig.add_trace(go.Scatter(
      x=train_sizes, y=val_scores_mean - val_scores_std, mode='lines', fill='tonexty', line=dict(color='orange', dash='dot'), showlegend=False
  ))

  # Mise en forme du graphique
  fig.update_layout(
      title="üìà Courbe d'Apprentissage",
      xaxis_title="Taille de l'ensemble d'entra√Ænement",
      yaxis_title="Score R¬≤",
      hovermode="x unified",
      template="plotly_white"
  )

  # --- üìå Affichage Streamlit ---
  st.plotly_chart(fig)



  assert len(y_pred_xgb) == len(y_test), "Les tailles de y_pred_xgb et y_test ne correspondent pas !"

  # --- üìå Cr√©ation du DataFrame de comparaison ---
  comparaison_df = pd.DataFrame({
      'R√©elle': y_test.values,
      'Pr√©diction': y_pred_xgb,
      'Jour de la semaine': X_test['jour_semaine'],
      'Mois': X_test['mois']
  }, index=X_test.index)

  # --- üìå Calcul des moyennes ---
  moyenne_par_jour = comparaison_df.groupby('Jour de la semaine')[['R√©elle', 'Pr√©diction']].mean()
  moyenne_par_mois = comparaison_df.groupby('Mois')[['R√©elle', 'Pr√©diction']].mean()
  st.write("üìä **Consommation R√©elle vs Pr√©diction par diff√©rentes dimensions**")

  # --- üìå S√©lecteur pour le filtre ---
  choix = st.radio("S√©lectionner un filtre :", ["Jour de la semaine", "Mois"])

  # --- üìå Affichage des r√©sultats ---
  if choix == "Jour de la semaine":
      fig = px.bar(moyenne_par_jour, x=moyenne_par_jour.index, y=['R√©elle', 'Pr√©diction'],
                  title="Moyenne de la consommation par jour de la semaine",  
                  labels={'value': "Consommation (MW)", 'variable': "Type"},
                  barmode='group', 
                  color_discrete_map={'R√©elle': '#87ceeb', 'Pr√©diction': '#002855'},  # Couleurs modifi√©es
                  width=1300,  # Largeur du graphique
                  height=700)  # Hauteur du graphique
      st.plotly_chart(fig)

  else:
      fig = px.bar(moyenne_par_mois, x=moyenne_par_mois.index, y=['R√©elle', 'Pr√©diction'],
                  title="Comparaison Moyenne - Mois",
                  labels={'value': "Consommation (MW)", 'variable': "Type"},
                  barmode='group', 
                  color_discrete_map={'R√©elle': '#87ceeb', 'Pr√©diction': '#002855'},  # Couleurs modifi√©es
                  width=1300,  # Largeur du graphique
                  height=700)  # Hauteur du graphique
      st.plotly_chart(fig)



  st.title("üìä Etude des residus ")
  residus = y_test - y_pred_xgb

# --- üé® Cr√©ation des graphiques ---
  st.write("### Visualisation des r√©sultats")

  # Diviser la page en 2 colonnes pour les graphiques
  col1, col2 = st.columns(2)

  # Graphique 1 : Comparaison des valeurs r√©elles vs pr√©dites
  with col1:
      fig1, ax1 = plt.subplots()
      ax1.scatter(y_test, y_pred_xgb, alpha=0.5)
      ax1.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--', lw=2)
      ax1.set_xlabel('Valeurs R√©elles')
      ax1.set_ylabel('Valeurs Pr√©dites')
      ax1.set_title('Comparaison des valeurs r√©elles vs pr√©dites')
      st.pyplot(fig1)

  # Graphique 2 : Graphique de dispersion des r√©sidus
  with col2:
      fig2, ax2 = plt.subplots()
      ax2.scatter(y_pred_xgb, residus, alpha=0.5)
      ax2.axhline(y=0, color='r', linestyle='--')
      ax2.set_xlabel('Valeurs Pr√©dites')
      ax2.set_ylabel('R√©sidus')
      ax2.set_title('Dispersion des R√©sidus')
      st.pyplot(fig2)

  # Diviser la page en 2 colonnes pour les graphiques suivants
  col3, col4 = st.columns(2)

  # Graphique 3 : Histogramme des r√©sidus
  with col3:
      fig3, ax3 = plt.subplots()
      sns.histplot(residus, kde=True, ax=ax3)
      ax3.set_xlabel('R√©sidus')
      ax3.set_ylabel('Fr√©quence')
      ax3.set_title('Histogramme des r√©sidus')
      st.pyplot(fig3)

  # Graphique 4 : QQ plot des r√©sidus
  with col4:
      fig4, ax4 = plt.subplots()
      stats.probplot(residus, dist="norm", plot=ax4)
      ax4.set_title('QQ Plot des R√©sidus')
      st.pyplot(fig4)

elif page == pages[4]:
  from datetime import datetime
  import joblib
  regions = {
    '√éle-de-France': 75, 'Auvergne-Rh√¥ne-Alpes': 69, 'Bourgogne-Franche-Comt√©': 21,
    'Bretagne': 29, 'Centre-Val de Loire': 37, 'Grand Est': 67, 'Hauts-de-France': 59,
    'Normandie': 76, 'Nouvelle-Aquitaine': 33, 'Occitanie': 31, 'Pays de la Loire': 44,
    "Provence-Alpes-C√¥te d'Azur": 13
}
  st.title('Projet Energie - Pr√©dictions')

# S√©lection de la r√©gion
  region_selectionnee = st.selectbox('S√©lectionnez une r√©gion :', list(regions.keys()))

# Ajustement de la temp√©rature
  temperature = st.slider('Ajustez la temp√©rature (¬∞C) :', -10, 30, 15)

  # S√©lection de la date (sans heure)
  date_selectionnee = st.date_input('S√©lectionnez une date :', datetime(2022, 1, 1))

  # Affichage des informations s√©lectionn√©es
  st.write(f"Date s√©lectionn√©e : {date_selectionnee}")
  st.write(f"**Le {date_selectionnee} en {region_selectionnee} :**")

  # Pr√©paration des donn√©es pour la pr√©diction
  donnees_utilisateur = {
      'Temp√©rature (¬∞C)': temperature,
      'Humidit√©': df['Humidit√©'].mean(),  # Vous pouvez ajuster cela selon vos besoins
      'Vitesse du vent moyen 10 mn': df['Vitesse du vent moyen 10 mn'].mean(),  # Idem
      'Pression station': df['Pression station'].mean(),  # Idem
      'R√©gion': regions[region_selectionnee],
      'jour_semaine': pd.to_datetime(date_selectionnee).dayofweek,  # Jour de la semaine (0 = Lundi, 6 = Dimanche)
      'mois': pd.to_datetime(date_selectionnee).month  # Mois (1 = Janvier, 12 = D√©cembre)
  }
  xgb_model = joblib.load("xgbo_model")


  # Conversion en DataFrame
  donnees_utilisateur_df = pd.DataFrame([donnees_utilisateur])

  # Pr√©diction
  prediction = xgb_model.predict(donnees_utilisateur_df)

  # Affichage de la pr√©diction
# Affichage de la pr√©diction en gras et avec un style original
  st.markdown(
      f"<h2 style='text-align: center; color: #FF5733; font-weight: bold;'>"
      f"Pr√©diction : {prediction[0]:.1f} MW"
      f"</h2>",
      unsafe_allow_html=True
  )
